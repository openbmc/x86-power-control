{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7599d711_d9ee5dac",
        "filename": "src/power_control.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2904,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-02-09T23:00:40Z",
      "side": 1,
      "message": "So if we\u0027re just unconditionally asserting it and leaving it that way, I\u0027m not sure I understand the point.  Is the assumption just that if the BMC is running at all, then all the standby rails must be in a good state?  Is there some other input (like a voltage measurement from an ADC or something) that the BMC should be checking first instead of just blindly asserting it?  Because if this is really the entirety of the logic that\u0027s needed, it seems like it might as well just be a gpio-hog in the device tree.",
      "range": {
        "startLine": 2899,
        "startChar": 0,
        "endLine": 2904,
        "endChar": 0
      },
      "revId": "4717761beb344de23fe52371d34b2f06961512b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a44397f6_cfec0ea8",
        "filename": "src/power_control.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2904,
      "author": {
        "id": 1000299
      },
      "writtenOn": "2024-02-14T16:41:40Z",
      "side": 1,
      "message": "A typical power and boot sequence is specified in Open Compute Project - DC SCM v1.0 specification: https://www.opencompute.org/documents/ocp-dc-scm-spec-rev-1-0-pdf\nPlease refer section 3.4.12 Standby Power and Boot Sequence of the above document.",
      "parentUuid": "7599d711_d9ee5dac",
      "range": {
        "startLine": 2899,
        "startChar": 0,
        "endLine": 2904,
        "endChar": 0
      },
      "revId": "4717761beb344de23fe52371d34b2f06961512b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27de9d68_becd39dd",
        "filename": "src/power_control.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2904,
      "author": {
        "id": 1000299
      },
      "writtenOn": "2024-02-14T16:42:04Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "a44397f6_cfec0ea8",
      "range": {
        "startLine": 2899,
        "startChar": 0,
        "endLine": 2904,
        "endChar": 0
      },
      "revId": "4717761beb344de23fe52371d34b2f06961512b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fa4dca7_24d1deba",
        "filename": "src/power_control.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2904,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-02-16T01:29:02Z",
      "side": 1,
      "message": "Okay, thanks for the spec link -- that\u0027s a useful reference, but I\u0027m not clear on how it motivates this patch.  From that document, it looks like HPM_STBY_EN must be asserted before HPM_STBY_RDY, which in turn must be asserted before the BMC can even be released from reset, so something else on the SCM must be driving it prior to the BMC coming online -- a CPLD or the like, or maybe just a pull-up resistor?  Are there any situations in which the BMC might want to deassert HPM_STBY_EN, or would doing so also reset the BMC via HPM_STBY_RDY getting deasserted as a result?",
      "parentUuid": "27de9d68_becd39dd",
      "range": {
        "startLine": 2899,
        "startChar": 0,
        "endLine": 2904,
        "endChar": 0
      },
      "revId": "4717761beb344de23fe52371d34b2f06961512b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15803b67_86d9ca22",
        "filename": "src/power_control.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2904,
      "author": {
        "id": 1000299
      },
      "writtenOn": "2024-02-16T01:55:15Z",
      "side": 1,
      "message": "HPM_STBY_EN is a signal to HPM after verifying BMC side VRs are good [Which is optional if the VRs are self-enabled]. The purpose of this patch is to introduce a signal called \"HPM_STBY_EN\" which is a standard signal as per DC-SCM specification and initializing it to default state. HPM_STBY_EN is an indication for the HPM FPGA/CPLD to start the rest of the power sequencing. [Turn on host side power rails, etc].",
      "parentUuid": "1fa4dca7_24d1deba",
      "range": {
        "startLine": 2899,
        "startChar": 0,
        "endLine": 2904,
        "endChar": 0
      },
      "revId": "4717761beb344de23fe52371d34b2f06961512b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32d7fb39_05579337",
        "filename": "src/power_control.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2904,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-02-16T05:25:07Z",
      "side": 1,
      "message": "Okay, but what about\n\n\u003e Are there any situations in which the BMC might want to deassert HPM_STBY_EN, or would doing so also reset the BMC via HPM_STBY_RDY getting deasserted as a result?\n\nBecause if it *is* just always unconditionally asserted, I\u0027m back to what I mentioned in my first comment above: could/should it just be a gpio-hog in the device tree instead?",
      "parentUuid": "15803b67_86d9ca22",
      "range": {
        "startLine": 2899,
        "startChar": 0,
        "endLine": 2904,
        "endChar": 0
      },
      "revId": "4717761beb344de23fe52371d34b2f06961512b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7caa94e_f85547c0",
        "filename": "src/power_control.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2904,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2024-02-16T11:35:14Z",
      "side": 1,
      "message": "\"gpio-hog\" sets the pin high/low during boot-up right? This approch will fail follow the sequence mentioned  in the \"Figure 30: Power and Boot Sequence Diagram\" in the document shared by Supreeth. Setting this pin prior to other existing GPIO\u0027s initialization can mess up the host power sequence.",
      "parentUuid": "32d7fb39_05579337",
      "range": {
        "startLine": 2899,
        "startChar": 0,
        "endLine": 2904,
        "endChar": 0
      },
      "revId": "4717761beb344de23fe52371d34b2f06961512b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfe35ffc_bc13fb41",
        "filename": "src/power_control.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2904,
      "author": {
        "id": 1000299
      },
      "writtenOn": "2024-02-16T15:08:54Z",
      "side": 1,
      "message": "HPM_STBY_EN is one of the dedicated signals that will need to be controlled by power management/control module. i.e., it needs to be initialized at the beginning. Further, this signal will be set to indicate BMC\u0027s power control module is ready to take the inputs [PWR_GOOD] from the HPM FPGA. gpio-hog wont help here because this needs to be initialized first and will then need to be set before the start of IO loop. This patch only initializes it, You are correct that the setting part of it is missing in this. Jayanth will work with Konstantin to verify and push next version of the patch.",
      "parentUuid": "a7caa94e_f85547c0",
      "range": {
        "startLine": 2899,
        "startChar": 0,
        "endLine": 2904,
        "endChar": 0
      },
      "revId": "4717761beb344de23fe52371d34b2f06961512b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a06a1d3_8fae0544",
        "filename": "src/power_control.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2904,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2024-02-16T22:03:29Z",
      "side": 1,
      "message": "\u003e \"gpio-hog\" sets the pin high/low during boot-up right?\n\nYes, the kernel simply holds the GPIO in a single fixed state (applied during boot) and prevents userspace from accessing it.\n\n\u003e This approch will fail follow the sequence mentioned in the \"Figure 30: Power and Boot Sequence Diagram\" in the document shared by Supreeth. Setting this pin prior to other existing GPIO\u0027s initialization can mess up the host power sequence.\n\nThis is what I don\u0027t understand.  Figure 30 shows \"HPM_STBY_EN \u003d 1\" *before* \"BMC reset released\".  If it\u0027s already asserted before the BMC even boots, how would a gpio-hog (re-)asserting it during the BMC\u0027s boot sequence change anything?",
      "parentUuid": "bfe35ffc_bc13fb41",
      "range": {
        "startLine": 2899,
        "startChar": 0,
        "endLine": 2904,
        "endChar": 0
      },
      "revId": "4717761beb344de23fe52371d34b2f06961512b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20f28c5b_8439d01e",
        "filename": "src/power_control.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2904,
      "author": {
        "id": 1000299
      },
      "writtenOn": "2024-02-21T02:22:48Z",
      "side": 1,
      "message": "Please note that this is just a reasonable approximation of the signal. This signal is \"Power Management/Control\" signal as per DC-SCM spec, the sequence shown there is just one example. Hence the signal needs to be part of power control Configuration. on AMD platforms, this indicates to HPM FPGA/CPLD to start the power sequence and BMC is ready and will monitor/catch any power events that happens after the power sequence is started. Also, this signal needs to be asserted after firmware update or BMC reboot, after power control module is ready. @Zev - Can you please elaborate on what your specific concerns are, so that we address it appropriately?",
      "parentUuid": "6a06a1d3_8fae0544",
      "range": {
        "startLine": 2899,
        "startChar": 0,
        "endLine": 2904,
        "endChar": 0
      },
      "revId": "4717761beb344de23fe52371d34b2f06961512b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c86d3e5_5f9255b3",
        "filename": "src/power_control.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2904,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2024-02-22T21:27:32Z",
      "side": 1,
      "message": "```\nAlso, this signal needs to be asserted after firmware update or BMC reboot, after power control module is ready\n```\n\nDoes it de-assert automatically after firmware update or BMC reboot? Or does it need to be explicitly de-asserted somehow?",
      "parentUuid": "20f28c5b_8439d01e",
      "range": {
        "startLine": 2899,
        "startChar": 0,
        "endLine": 2904,
        "endChar": 0
      },
      "revId": "4717761beb344de23fe52371d34b2f06961512b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}