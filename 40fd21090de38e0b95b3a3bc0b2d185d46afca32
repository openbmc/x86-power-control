{
  "comments": [
    {
      "key": {
        "uuid": "2a5a2092_c90c99c6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-07-28T15:12:22Z",
      "side": 1,
      "message": "Why is this a good thing to do?  I\u0027m seeing commits in other meta-layers (ex. meta-quanta) where they\u0027re already adapting to the fact that the dbus names are numbered (with zero).  I think we need to make sure we stop the churn here.  Is there any reason to not simply continue using 0 for single-host?",
      "revId": "40fd21090de38e0b95b3a3bc0b2d185d46afca32",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a89e3207_ceb0b9e1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2021-07-28T16:25:06Z",
      "side": 1,
      "message": "It was to maintain backward-compatibility with the existing serivce name, so all the applications that use the CurrentHostState property continue working.\n\nIs it expected for the service name to be appended with a number when multiple instances are started?  If this is normal and expected, then we can absorb the cost and find and update all usages.\n\nIf that is the case, is there a better way to handle service names when there can be multiple instances like this?  It doesn\u0027t make much sense to me to just update everything looking for \"xyz.openbmc_project.State.Host\" to \"xyz.openbmc_project.State.Host0\".  Shouldn\u0027t it also support Host1, etc.?",
      "parentUuid": "2a5a2092_c90c99c6",
      "revId": "40fd21090de38e0b95b3a3bc0b2d185d46afca32",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ecb7a94_feff0f40",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-07-28T16:33:06Z",
      "side": 1,
      "message": "\u003e ...then we can absorb the cost and find and update all usages.\n\nMy main immediate concern is that others are already starting to try to compensate for what was changed recently.\n\n\u003e Is it expected for the service name to be appended with a number when multiple instances are started?  If this is normal and expected, then we can absorb the cost and find and update all usages.\n\nYes, this is the expected design.  It is documented in a few places where the multi-host design was described.  I know it has been in state manager for years.\n\n\u003e If that is the case, is there a better way to handle service names when there can be multiple instances like this?  It doesn\u0027t make much sense to me to just update everything looking for \"xyz.openbmc_project.State.Host\" to \"xyz.openbmc_project.State.Host0\".  Shouldn\u0027t it also support Host1, etc.?\n\nIn general, they shouldn\u0027t...  Unless a service is Foo\u003cN\u003e looking for Bar\u003cN\u003e, there really shouldn\u0027t be direct service\u003c-\u003eservice dependencies like this.  It is almost always going to be wrong for multi-host systems.  Look-ups is what mapper is for.\n\nIf you have specific examples we can talk about them in more detail about how to resolve the issues.\n\n---\n\nI would suggest we just eat the cost now and fix them all.  Otherwise I think we\u0027re constantly going to be fighting between single-host and multi-host implementations and trying to identify breakages.",
      "parentUuid": "a89e3207_ceb0b9e1",
      "revId": "40fd21090de38e0b95b3a3bc0b2d185d46afca32",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09e0c75c_f24a918a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2021-07-28T16:40:36Z",
      "side": 1,
      "message": "snip ...\n\u003e \u003e If that is the case, is there a better way to handle service names when there can be multiple instances like this?  It doesn\u0027t make much sense to me to just update everything looking for \"xyz.openbmc_project.State.Host\" to \"xyz.openbmc_project.State.Host0\".  Shouldn\u0027t it also support Host1, etc.?\n\u003e \n\u003e In general, they shouldn\u0027t...  Unless a service is Foo\u003cN\u003e looking for Bar\u003cN\u003e, there really shouldn\u0027t be direct service\u003c-\u003eservice dependencies like this.  It is almost always going to be wrong for multi-host systems.  Look-ups is what mapper is for.\n\u003e \n\u003e If you have specific examples we can talk about them in more detail about how to resolve the issues.\n\nNo specific examples.  One service that I know is impacted, is dbus-sensors.  So, in that case, we are safe to update to Host0 and the sensor scanning will always start/stop based on the state of Host0 even in multi-host systems?\n\n\u003e \n\u003e ---\n\u003e \n\u003e I would suggest we just eat the cost now and fix them all.  Otherwise I think we\u0027re constantly going to be fighting between single-host and multi-host implementations and trying to identify breakages.\n\nSounds good.  Do we need a mailing list announcement of this change and impact?",
      "parentUuid": "4ecb7a94_feff0f40",
      "revId": "40fd21090de38e0b95b3a3bc0b2d185d46afca32",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0e0f2d9_7bb11d2c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-07-28T16:48:07Z",
      "side": 1,
      "message": "\u003e One service that I know is impacted, is dbus-sensors.  So, in that case, we are safe to update to Host0 and the sensor scanning will always start/stop based on the state of Host0 even in multi-host systems?\n\nThat sounds wrong on the surface?  Multi-host systems purposefully start counting at 1 so that we easily identify these kinds of wrong-depend-on-0.  Do we need a target or a mapper-wait instead?\n\n\u003e Do we need a mailing list announcement of this change and impact?\n\nYeah, we probably should now that we recognize it wasn\u0027t as easy as expected from the previous code changes...  Do you or Naveen want to take ownership of that?",
      "parentUuid": "09e0c75c_f24a918a",
      "revId": "40fd21090de38e0b95b3a3bc0b2d185d46afca32",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba334754_6df768fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2021-07-28T17:15:01Z",
      "side": 1,
      "message": "\u003e \u003e One service that I know is impacted, is dbus-sensors.  So, in that case, we are safe to update to Host0 and the sensor scanning will always start/stop based on the state of Host0 even in multi-host systems?\n\u003e \n\u003e That sounds wrong on the surface?  Multi-host systems purposefully start counting at 1 so that we easily identify these kinds of wrong-depend-on-0.  Do we need a target or a mapper-wait instead?\n\nI don\u0027t know.  We currently only have single-host systems, so haven\u0027t needed to investigate the right approach for these.  This is where I was thinking backwards-compatibility may be nice while we work out the right way to update all of the dependent applications.\n\nIs there any way to have this be backward and forward compatible so existing applications that use Host will still work, while newly updated applications can use Host0, Host1, etc. as needed?\n\n\u003e \n\u003e \u003e Do we need a mailing list announcement of this change and impact?\n\u003e \n\u003e Yeah, we probably should now that we recognize it wasn\u0027t as easy as expected from the previous code changes...  Do you or Naveen want to take ownership of that?\n\nNaveen, would you be willing to start that thread?",
      "parentUuid": "d0e0f2d9_7bb11d2c",
      "revId": "40fd21090de38e0b95b3a3bc0b2d185d46afca32",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fad280e3_f96ef4f7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-07-28T17:38:32Z",
      "side": 1,
      "message": "\u003e Is there any way to have this be backward and forward compatible so existing applications that use Host will still work, while newly updated applications can use Host0, Host1, etc. as needed?\n\nYou could potentially claim both service names (ex. Host and Host0), but that doesn\u0027t really fix the multi-host systems.  Anytime we have someone depending directly on a \"Host\" service name and not \"Host\u003cN\u003e\" it\u0027s probably doing the wrong thing on multi-host.  I\u0027m not sure which of the Host\u003cN\u003e\u0027s you\u0027d want to have claim the non-numbered entity... maybe none and just use that to find the bugs?",
      "parentUuid": "ba334754_6df768fd",
      "revId": "40fd21090de38e0b95b3a3bc0b2d185d46afca32",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a224448e_773c01f6",
        "filename": "power-control-x86/service_files/xyz.openbmc_project.Chassis.Control.Power.service",
        "patchSetId": 6
      },
      "lineNbr": 13,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-07-28T01:21:05Z",
      "side": 1,
      "message": "No newline at end of revision file.",
      "revId": "40fd21090de38e0b95b3a3bc0b2d185d46afca32",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}